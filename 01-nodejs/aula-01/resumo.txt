Resumo da Primeira Aula
Na aula, foram abordados os seguintes módulos e suas funcionalidades:

1. Módulo os (Módulo Nativo do Node.js)
O módulo os é um módulo nativo do Node.js. Ele fornece funcionalidades relacionadas ao sistema operacional. Foram abordados os seguintes métodos:

os.type():

Argumentos: Nenhum.

Retorno: Retorna o tipo do sistema operacional (por exemplo, 'Linux', 'Darwin' para macOS, etc.).

Exemplo: console.log(os.type()); // Exibe o tipo do sistema operacional.

os.version():

Argumentos: Nenhum.

Retorno: Retorna a versão do sistema operacional.

Exemplo: console.log(os.version()); // Exibe a versão do sistema operacional.

os.homedir():

Argumentos: Nenhum.

Retorno: Retorna o diretório home do usuário.

Exemplo: console.log(os.homedir()); // Exibe o diretório home do usuário.

2. Módulo path (Módulo Nativo do Node.js)
O módulo path é um módulo nativo do Node.js. Ele oferece utilitários para manipulação de caminhos de arquivos. Foram abordados os seguintes métodos:

path.join(...paths):

Argumentos: Um ou mais caminhos de diretórios ou arquivos.

Retorno: Retorna um caminho combinado de todos os argumentos fornecidos.

Exemplo: console.log(path.join(__dirname, 'file.txt')); // Exibe o caminho completo de 'file.txt'.

path.basename(path):

Argumentos: Um caminho de arquivo.

Retorno: Retorna o nome do arquivo ou diretório no caminho fornecido.

Exemplo: console.log(path.basename('/home/user/file.txt')); // Exibe 'file.txt'.

path.extname(path):

Argumentos: Um caminho de arquivo.

Retorno: Retorna a extensão do arquivo (por exemplo, '.js', '.txt').

Exemplo: console.log(path.extname('file.txt')); // Exibe '.txt'.

3. Arquivo math.js (Não Nativo do Node.js)
O arquivo math.js contém funções de operações matemáticas simples. Essas funções são exportadas usando exports, que é uma forma de compartilhar funcionalidades de um módulo. Foram abordados os seguintes métodos:

add(a, b):

Argumentos: Dois números a e b.

Retorno: Retorna a soma de a e b.

Exemplo: console.log(add(2, 3)); // Exibe 5.

subtract(a, b):

Argumentos: Dois números a e b.

Retorno: Retorna a subtração de a e b.

Exemplo: console.log(subtract(5, 3)); // Exibe 2.

multiply(a, b):

Argumentos: Dois números a e b.

Retorno: Retorna o produto de a e b.

Exemplo: console.log(multiply(2, 3)); // Exibe 6.

divide(a, b):

Argumentos: Dois números a e b.

Retorno: Retorna a divisão de a por b.

Exemplo: console.log(divide(6, 3)); // Exibe 2.

Alternativas para Exportação de Módulos em Node.js
Na aula, foram abordadas diferentes maneiras de exportar dados de um módulo:

Usando module.exports:

Uma das formas tradicionais de exportar funções ou objetos de um módulo. Exemplo:

Você pode exportar um objeto com várias funções, como add, subtract, multiply, divide, atribuindo-as a module.exports.

Usando exports:

A forma alternativa de exportação, mais concisa. Ao invés de usar module.exports, podemos usar exports diretamente para adicionar funções ou propriedades ao módulo. Exemplo:

As funções podem ser adicionadas diretamente ao objeto exports, como exports.add = ....

Observação: Deve-se ter cuidado ao reatribuir exports a um novo valor, pois isso pode quebrar a referência interna do Node.js.

4. Arquivo server.js (Não Nativo do Node.js)
No arquivo server.js, as funções de math.js são importadas e executadas. Utilizamos a função require(), que é nativa do Node.js, para importar o módulo math.js.

A função require() permite acessar o conteúdo exportado de outros módulos, como módulos nativos (como os, path) ou não nativos (como o math.js que criamos).

Execução das funções importadas:

A função add(2, 3) retorna a soma de 2 e 3.

A função subtract(2, 3) retorna a subtração de 2 e 3.

A função multiply(2, 3) retorna o produto de 2 e 3.

A função divide(2, 3) retorna a divisão de 2 por 3.

5. Função require() (Nativa do Node.js)
A função require() é nativa do Node.js e é usada para importar módulos, sejam nativos (como os, path) ou não nativos (como o math.js que criamos). Quando você usa o require(), ele retorna o que foi exportado pelo módulo.

Exemplo:

Para importar um módulo, você usa require('nome_do_modulo') ou require('./caminho_do_modulo').

6. Variável __dirname (Nativa do Node.js)
A variável __dirname é nativa do Node.js e fornece o caminho absoluto do diretório onde o script está sendo executado.

Exemplo:

Você pode utilizar __dirname para obter o caminho completo do diretório em que o código está sendo executado.

Exemplo: console.log(__dirname); // Exibe o caminho completo do diretório atual.

7. Variável __filename (Nativa do Node.js)
A variável __filename é nativa do Node.js e fornece o caminho completo e o nome do arquivo em que o código está sendo executado.

Exemplo:

Você pode utilizar __filename para obter o caminho completo do arquivo atual, incluindo o nome do arquivo.

Exemplo: console.log(__filename); // Exibe o caminho completo do arquivo atual.

Este resumo contém todas as informações sobre os módulos abordados na aula, destacando quando são nativos do Node.js, como o os, path, e as variáveis __dirname e __filename, assim como as funções que criamos no arquivo math.js, com as diferentes formas de exportação de dados de módulos em Node.js.