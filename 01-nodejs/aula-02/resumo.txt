üß† Resumo ‚Äì Aula 02 (Node.js com File System - Parte 1)

M√≥dulo nativo fs (File System) do Node.js.

üì¶ O que √© o m√≥dulo fs
O m√≥dulo fs (abrevia√ß√£o de File System) faz parte do n√∫cleo do Node.js. Ele permite que o programa interaja diretamente com o sistema de arquivos do computador.

Com ele, √© poss√≠vel:

Ler arquivos

Escrever arquivos

Renomear arquivos

Criar ou remover pastas

E muito mais

Esse m√≥dulo n√£o precisa ser instalado via npm, pois j√° vem embutido no Node.js.

‚úÖ Importa√ß√£o do m√≥dulo fs
A constante fs √© declarada e recebe o conte√∫do do m√≥dulo nativo:

const fs = require("fs");

O m√©todo require() carrega o m√≥dulo nativo do Node.js.

O argumento "fs" indica que est√° sendo carregado o m√≥dulo do sistema de arquivos.

O retorno de require("fs") √© um objeto com diversos m√©todos que permitem intera√ß√µes com o sistema de arquivos.

üìò Leitura de um arquivo com fs.readFile()
Em seguida, √© utilizada a fun√ß√£o readFile() do objeto fs.

fs.readFile("./files/starter.txt", (err, data) => {
‚ÄÉif (err) throw err;
‚ÄÉconsole.log(data);
});

Explica√ß√£o detalhada:
fs.readFile() √© um m√©todo ass√≠ncrono que pertence ao objeto fs.

Ele serve para ler o conte√∫do de um arquivo.

Par√¢metros da fun√ß√£o readFile():
Caminho do arquivo (string):
"./files/starter.txt"
Indica que o arquivo a ser lido est√° dentro da pasta files e se chama starter.txt.

Fun√ß√£o de callback (function):
(err, data) => { ... }
Essa fun√ß√£o √© executada ap√≥s o t√©rmino da leitura do arquivo. Ela recebe dois argumentos:

err: representa um poss√≠vel erro ocorrido durante a leitura.

data: representa o conte√∫do do arquivo. O valor retornado neste caso √© um Buffer, que √© uma estrutura bin√°ria utilizada para representar dados de forma bruta no Node.js.

Corpo da fun√ß√£o callback:
if (err) throw err;
Se existir um erro, ele √© lan√ßado com throw, encerrando a execu√ß√£o do programa com uma mensagem de erro.

console.log(data);
Exibe o conte√∫do lido no terminal.
Neste caso, como o conte√∫do est√° em formato Buffer, ele n√£o aparece como texto leg√≠vel.

üí° Observa√ß√£o importante
Para converter o conte√∫do de Buffer em texto leg√≠vel, √© poss√≠vel usar o m√©todo .toString() no objeto retornado:

console.log(data.toString());

O m√©todo .toString() √© um m√©todo nativo da classe Buffer.

Ele transforma os dados bin√°rios em texto (string), que pode ser lido normalmente no terminal.

